author: JeffreyWilkinson
core-version: >=5.1.5
created: 20150106212358042
dependents: 
description: demo tw with md
list: readme license
plugin-type: plugin
source: https://github.com/buggyj/TW5-small
title: $:/plugins/bj/small/tagmangleplus
type: application/json
version: 0.0.1

{
    "tiddlers": {
        "$:/bj/modules/widgets/mangletagsextra.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/mangletagsextra.js\ntype: application/javascript\nmodule-type: widget\n\nMangleTagsExtaWidget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MangleTagsExtraWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMangleTagsExtraWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMangleTagsExtraWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n\n};\n\n/*\nCompute the internal state of the widget\n*/\nMangleTagsExtraWidget.prototype.execute = function() {\n\t// Get our parameters\n    if (this.getAttribute(\"removeAll\")) this.removelist = this.wiki.filterTiddlers(this.getAttribute(\"removeAll\"),this);\n    if (this.getAttribute(\"addAll\")) this.addlist = this.wiki.filterTiddlers(this.getAttribute(\"addAll\"),this);\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMangleTagsExtraWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"removeAll\"] || changedAttributes[\"addAll\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n};\n\nMangleTagsExtraWidget.prototype.invokeMsgAction = function(param) {\n\t// Set defaults\n\tvar self = this;\n\tthis.mangleTitle = this.getVariable(\"currentTiddler\");\n\tif(param.event.param) {\n\t\tthis.mangleTitle = param.event.param;\n\t\tthis.sendParam = param.event.param;\n\t}\n\tif(this.catchTiddler) {\n\t\tthis.mangleTitle = this.catchTiddler;\n\t}\n\t// Get the target tiddler\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle);\n\t// If there is a find= attribute -- find the tag and remove it\n\t\n\tif(tiddler) {\n\t\tvar modification;\n\n\t\tif (this.removelist) {\n\t\t\tif (!modification) {\n\t\t\t\tmodification = this.wiki.getModificationFields();\n\t\t\t\tmodification.tags = (tiddler.fields.tags || []).slice(0);\n\t\t\t}\n\t\t\tmodification.tags = modification.tags.filter(function(i) {return self.removelist.indexOf(i) < 0;});\n\t\t}\n \n\t\tif(this.addlist) {\n\t\t\tif (!modification) {\n\t\t\t\tmodification = this.wiki.getModificationFields();\n\t\t\t\tmodification.tags = (tiddler.fields.tags || []).slice(0);\n\t\t\t}\n\t\t\t$tw.utils.pushTop(modification.tags,this.addlist);\n\t\t}\n\n\t\t// Save the modified tiddler\n\t\tif (modification) {\n\t\t\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\n\t\t}\n\t}\n\n\treturn param;\n\n};\n\nexports.mangletagsextra = MangleTagsExtraWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/mangletagsextra.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/plylist.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/plylist.js\ntype: application/javascript\nmodule-type: widget\n\n\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MPlayListWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\t\tthis.addEventListeners([\n\t{type: \"tm-ply-next\", handler: \"handleNextEvent\"},\n\t{type: \"tm-ply-move\", handler: \"handleMoveEvent\"},\n\t{type: \"tm-ply-prev\", handler: \"handlePrevEvent\"}]);\n};\n/*\nInherit from the base widget class\n*/\nMPlayListWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMPlayListWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMPlayListWidget.prototype.execute = function() {\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n\tthis.n =-1;\n    this.syntid = this.getAttribute(\"syntid\");\n    this.mode = this.getAttribute(\"mode\");\n\t\t// Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\nMPlayListWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[tag[\"+this.getVariable(\"currentTiddler\")+\"]]\";\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"filter\",defaultFilter),this);\n};\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nMPlayListWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\t//alert(this.attributes.filter);\n\tif(changedAttributes.filter || changedAttributes[\"$tiddler\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nMPlayListWidget.prototype.invokeMsgAction = function(param) {\n\tthis.doNext();\n\treturn param;\n};\nMPlayListWidget.prototype.updatelist = function() {\n\tvar list,n,i,curr = this.list[this.n];\n\tlist = this.getTiddlerList();\n\tfor ( i = 0; i < list.length; i++) {\n\t\tif (list[i] === curr) break;\n\t}\n\tif (i === list.length) i = 0;\n\tthis.n = i;\n\tthis.list = list;\n}\n\t\nMPlayListWidget.prototype.doMove = function(loc) {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tfor (i = 0; i < this.list.length; i++) {\n\t\t\tif ((loc == this.list[i])) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doStart = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tthis.n = -1;\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tif (this.n == this.list.length -1) {\n\t\t\tthis.invokeActions();\n\t\t\treturn;\n\t\t};\n\t\tfor (i = this.n + 1; i < this.list.length; i++) {\n\t\t\tif ((tid = this.wiki.getTiddler(this.list[i])) ) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doNext = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tif (this.n == this.list.length -1) {\n\t\t\tthis.invokeActions();\n\t\t\treturn;\n\t\t}\n\t\tfor (i = this.n + 1; i < this.list.length; i++) {\n\t\t\tif ((tid = this.wiki.getTiddler(this.list[i]))) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doPrev = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\t\n\t\tfor (i = this.n - 1 ; i >=0; i--) {\n\t\t\tif ((tid = this.wiki.getTiddler(this.list[i])) && (tid.hasField(\"_canonical_uri\"))) {\n\t\t\t\turi = tid.fields._canonical_uri;\n\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\ttype: \"tm-mstart\",\n\t\t\t\t\tparamObject : {track : uri,equalize : tid.fields.equalize}\n\t\t\t\t});\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\t\n\t\t\t\tif (this.syntid.substring(0,13) === \"$:/temp/priv/\") {\n\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\ttype: \"tm-bj-playerRfresh\",\n\t\t\t\t\t\tparamObject : {title: this.syntid}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == -1? 0 : i);\n\t}\n}\nMPlayListWidget.prototype.handleNextEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doNext();\n\treturn false; // dont propegate\n}\nMPlayListWidget.prototype.handleMoveEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doMove(event.navigateTo);\n\treturn false; // dont propegate\n}\nMPlayListWidget.prototype.handlePrevEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doPrev();\n\treturn false; // dont propegate\n\t\n\t\n}\nexports[\"action-playlist\"] = MPlayListWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/plylist.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/msgcatcher.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/msgcatcher.js\ntype: application/javascript\nmodule-type: widget\n\nMsgCatcherWiget - root of msg action widget - \t1 \n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MsgCatcherWiget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMsgCatcherWiget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMsgCatcherWiget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMsgCatcherWiget.prototype.execute = function() {\n\t// Get our parameters\n    this.msg=this.getAttribute(\"msg\");\n    if (this.msg) {\n\t\tthis.eventListeners = {};\n\t\tthis.addEventListeners([\n\t\t\t{type: this.msg, handler: \"handleEvent\"}\n\t\t]);\n\t}\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMsgCatcherWiget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"msg\"] ) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nMsgCatcherWiget.prototype.handleEvent = function(event) {\n\tthis.invokeMsgActions(event);\n\treturn false;//always consume event\n};\n\n/*Invoke any action widgets that are immediate children of this widget\n*/\nMsgCatcherWiget.prototype.invokeMsgActions = function(event) {\n\tfor(var t=0; t<this.children.length; t++) {\n\t\tvar child = this.children[t];\n\t\tvar params = {event:event,continue:false};\n\t\tif(child.invokeMsgAction) params = child.invokeMsgAction(params); \n\t}\n\tif(params.continue && this.parentWidget) {\n\t\tthis.parentWidget.dispatchEvent(params.event);\n\t}\n};\nexports.msgcatcher = MsgCatcherWiget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/msgcatcher.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/local.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/local.js\ntype: application/javascript\nmodule-type: widget\n\nMangleTagsExtaWidget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MangleTagsWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.addEventListeners([\n        {type: \"tm-navigate\", handler: \"handleMangleTagsEvent\"}\n   \t]);\n};\n\n/*\nInherit from the base widget class\n*/\nMangleTagsWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMangleTagsWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMangleTagsWidget.prototype.execute = function() {\n\t// Get our parameters\n    this.msg = this.getAttribute(\"msg\");\n this.tid = this.getAttribute(\"tid\");\n    //if (this.getAttribute(\"addAll\")) this.addlist = this.wiki.filterTiddlers(this.getAttribute(\"addAll\"),this);\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMangleTagsWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(false) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nMangleTagsWidget.prototype.handleMangleTagsEvent = function(event) {\n\t// Set defaults\n\tvar self = this;\n\tvar ref = {};\n\tref[this.tid] = {\"modified\":true};\n\tthis.refreshChildren(ref);\n};\n\nexports.local = MangleTagsWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/local.js",
            "type": "application/javascript",
            "module-type": "widget"
        }
    }
}