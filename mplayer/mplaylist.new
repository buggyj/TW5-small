/*\
title: $:/bj/modules/widgets/mplylist.new

module-type: widget



\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

var Widget = require("$:/core/modules/widgets/widget.js").widget;

var DeleteTiddlerWidget = function(parseTreeNode,options) {
	this.initialise(parseTreeNode,options);
		this.addEventListeners([
	{type: "tm-mply-next", handler: "handleNextEvent"},
	{type: "tm-mply-prev", handler: "handlePrevEvent"}]);
};
/*
Inherit from the base widget class
*/
DeleteTiddlerWidget.prototype = new Widget();

/*
Render this widget into the DOM
*/
DeleteTiddlerWidget.prototype.render = function(parent,nextSibling) {
	this.parentDomNode = parent;
	this.computeAttributes();
	this.execute();
	this.renderChildren(parent,nextSibling);
};

/*
Compute the internal state of the widget
*/
DeleteTiddlerWidget.prototype.execute = function() {
	// Compose the list elements
	this.list = this.getTiddlerList();
	this.n =-1;
    this.syntid = this.getAttribute("syntid",this.getVariable("currentTiddler"));
		// Construct the child widgets
	this.makeChildWidgets();
};

DeleteTiddlerWidget.prototype.getTiddlerList = function() {
	var defaultFilter = "[!is[system]sort[title]]";
	return this.wiki.filterTiddlers(this.getAttribute("filter",defaultFilter),this);
};
/*
Refresh the widget by ensuring our attributes are up to date
*/
DeleteTiddlerWidget.prototype.refresh = function(changedTiddlers) {
	var changedAttributes = this.computeAttributes();
	//alert(this.attributes.filter);
	if(changedAttributes.filter || changedAttributes["$tiddler"]) {
		this.refreshSelf();
		return true;
	}
	return this.refreshChildren(changedTiddlers);
};

/*
Invoke the action associated with this widget
*/
DeleteTiddlerWidget.prototype.invokeAction = function(triggeringWidget,event) {
	// Check for an empty list
	this.doNext();
	return true; // Action was invoked
};
DeleteTiddlerWidget.prototype.doNext = function() {
	if(this.list.length === 0) {
		//do nothing
	} else {
		var tid,uri,i;
		if (this.n == this.list.length -1) return;
		for (i = this.n + 1; i < this.list.length; i++) {
			if ((tid = this.wiki.getTiddler(this.list[i])) && (tid.hasField("_canonical_uri"))) {
				uri = tid.fields._canonical_uri;
				this.dispatchEvent({
					type: "tm-mply",
					paramObject : {track : uri, type : true}
				});
				this.wiki.setTextReference(this.syntid,this.list[i],this.getVariable("currentTiddler"));
				
				if (this.syntid.substring(0,13) === "$:/temp/priv/") {
					this.dispatchEvent({
						type: "tm-bj-playerRfresh",
						paramObject : {title: this.syntid}
					});
				}
				break;
			}
		}
		this.n = (i == this.list.length ? this.list.length - 1 : i);
	}
}
DeleteTiddlerWidget.prototype.doPrev = function() {
	if(this.list.length === 0) {
		//do nothing
	} else {
		var tid,uri,i;
		
		for (i = this.n - 1 ; i >=0; i--) {
			if ((tid = this.wiki.getTiddler(this.list[i])) && (tid.hasField("_canonical_uri"))) {
				uri = tid.fields._canonical_uri;
				this.dispatchEvent({
					type: "tm-mply",
					paramObject : {track : uri, type : true}
				});
				this.wiki.setTextReference(this.syntid,this.list[i],this.getVariable("currentTiddler"));
				
				if (this.syntid.substring(0,13) === "$:/temp/priv/") {
					this.dispatchEvent({
						type: "tm-bj-playerRfresh",
						paramObject : {title: this.syntid}
					});
				}
				break;
			}
		}
		this.n = (i == -1? 0 : i);
	}
}
DeleteTiddlerWidget.prototype.handleNextEvent = function(event) {
		// Check for an empty list
	this.doNext();
	return false; // dont propegate
}
DeleteTiddlerWidget.prototype.handlePrevEvent = function(event) {
		// Check for an empty list
	this.doPrev();
	return false; // dont propegate
}
exports["action-mplaylist"] = DeleteTiddlerWidget;

})();
